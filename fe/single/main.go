/**
 * @Author: lyszhang
 * @Email: ericlyszhang@gmail.com
 * @Date: 2020/11/25 3:05 PM
 */

package main

import (
	"fmt"
	"github.com/fentec-project/gofe/data"
	"github.com/fentec-project/gofe/innerprod/simple"
	"math/big"
)

func main() {
	// Instantiation of a trusted entity that
	// will generate master keys and FE key
	l := 2                  // length of input vectors
	bound := big.NewInt(10) // upper bound for input vector coordinates
	modulusLength := 2048   // bit length of prime modulus p
	trustedEnt, _ := simple.NewDDHPrecomp(l, modulusLength, bound)
	msk, mpk, _ := trustedEnt.GenerateMasterKeys()

	y := data.NewVector([]*big.Int{big.NewInt(1), big.NewInt(2)})
	feKey, _ := trustedEnt.DeriveKey(msk, y)

	// Simulate instantiation of encryptor
	// Encryptor wants to hide x and should be given
	// master public key by the trusted entity
	enc := simple.NewDDHFromParams(trustedEnt.Params)
	x := data.NewVector([]*big.Int{big.NewInt(3), big.NewInt(4)})
	cipher, _ := enc.Encrypt(x, mpk)

	// Simulate instantiation of decryptor that decrypts the cipher
	// generated by encryptor.
	dec := simple.NewDDHFromParams(trustedEnt.Params)
	// decrypt to obtain the result: inner prod of x and y
	// we expect xy to be 11 (e.g. <[1,2],[3,4]>)
	xy, _ := dec.Decrypt(cipher, feKey, y)

	fmt.Printf("xy=%d\n", xy)
}
